## Template for each generated RetroFacebook_Foo class.
## This template uses the Apache Velocity Template Language (VTL).
## The variables ($pkg, $props, and so on) are defined by the fields of MutableRetroFacebookTemplateVars.
##
## Comments, like this one, begin with ##. The comment text extends up to and including the newline
## character at the end of the line. So comments also serve to join a line to the next one.
## Velocity deletes a newline after a directive (#if, #foreach, #end etc) so ## is not needed there.
## That does mean that we sometimes need an extra blank line after such a directive.
##
## A post-processing step will remove unwanted spaces and blank lines, but will not join two lines.

#if (!$pkg.empty)
package $pkg;
#end

#foreach ($i in $imports)
import $i;
#end

import org.json.JSONObject;
import com.facebook.*;
import rx.Observable;
import rx.Subscriber;
import rx.functions.*;

import com.bluelinelabs.logansquare.LoganSquare;

import android.os.Bundle;
import android.util.Log;
import org.json.JSONObject;
import org.json.JSONException;

import java.util.Map;

${gwtCompatibleAnnotation}
public final class $subclass$formalTypes extends $origClass$actualTypes {

## Property getters

#foreach ($p in $props)

    @Override
    ${p.access}${p.type} ${p.getter}(${p.args}) {
        return Observable.just(this).map(new Func1<$subclass$formalTypes, Bundle>() {
            @Override public Bundle call($subclass$formalTypes t) {
#set ($map = ${p.queries})
#set ($maps = ${p.queryMaps})
#set ($bundles = ${p.queryBundles})
#if (!$map.isEmpty() || !$maps.isEmpty() || !$bundles.isEmpty())
                Bundle bundle = new Bundle();
#foreach ($query in $map.entrySet())
                bundle.putString($query.key, $query.value);
#end
#foreach ($queryMap in $maps)
                addMapToBubdle(bundle, ${queryMap});
#end
#foreach ($queryBundle in $bundles)
                bundle.putAll(${queryBundle});
#end
                return bundle;
#else
                return null;
#end
            }
        }).flatMap(new Func1<Bundle, Observable<GraphResponse>>() {
            @Override public Observable<GraphResponse> call(Bundle queries) {

#if ($p.get)

                GraphRequest request = GraphRequest.newGraphPathRequest(
                        AccessToken.getCurrentAccessToken(), ${p.path}, null);

#elseif ($p.post)

                GraphRequest request = null;
                try {
                    request = GraphRequest.newPostRequest(
                            AccessToken.getCurrentAccessToken(), ${p.path},
                            new JSONObject(LoganSquare.serialize(${p.body})),
                            null);
                } catch (JSONException e) {
                    return Observable.empty();
                } catch (java.io.IOException e) {
                    return Observable.empty();
                }

#end

                if (queries != null) request.setParameters(queries);
                return Observable.create(new OnSubscribeGraphResponse(request));
            }
        }).map(new Func1<GraphResponse, ${p.typeArgs}s>() {
            @Override public ${p.typeArgs}s call(GraphResponse response) {
                try {
                    Log.d("RetroFacebook", "${p.typeArgs}s: " + response.getJSONObject().toString());
                    return LoganSquare.parse(response.getJSONObject().toString(), AutoJson_${p.typeArgs}s.class);
                } catch (java.io.IOException e) {
                    e.printStackTrace();
                    return null;
                }
            }
        }).filter(new Func1<${p.typeArgs}s, Boolean>() {
            @Override public Boolean call(${p.typeArgs}s data) {
                return data != null;
            }
        }).flatMap(new Func1<${p.typeArgs}s, Observable<$p.typeArgs>>() {
            @Override public Observable<${p.typeArgs}> call(${p.typeArgs}s data) {
                return Observable.from(data.data());
            }
        });
    }

#end

    public static <T> T cast(Object o) {
        return (T) o;
    }

    public class OnSubscribeGraphResponse implements Observable.OnSubscribe<GraphResponse> {
        public GraphRequest request;

        public OnSubscribeGraphResponse(GraphRequest request) {
            this.request = request;
        }

        @Override
        public void call(final Subscriber<? super GraphResponse> sub) {
            Log.d("RetroFacebook", "onSubscribe");
            if (request != null) {
                request.setCallback(new GraphRequest.Callback() {
                    @Override
                    public void onCompleted(GraphResponse response) {
                        try {
                            FacebookRequestError requestError = response.getError();
                            FacebookException exception = (requestError == null) ? null : requestError.getException();

                            /* move into Observable.map()
                            if (response.getJSONObject() == null && exception == null) {
                                exception = new FacebookException("GraphObjectPagingLoader received neither a result nor an error.");
                            }
                            */

                            if (exception != null) {
                                sub.onError(exception);
                            } else {
                                sub.onNext(response);
                                request = response.getRequestForPagedResults(GraphResponse.PagingDirection.NEXT);

                                if (request != null) {
                                    Log.d("RetroFacebook", "hasNext");
                                    call(sub);
                                } else {
                                    Log.d("RetroFacebook", "end");
                                    sub.onCompleted();
                                }
                            }
                        } catch (Throwable e) {
                            sub.onError(e);
                        }
                    }
                });

                GraphRequest.executeBatchAsync(new GraphRequestBatch(request));
            } else {
                sub.onCompleted();
            }
        }
    }

    private static void addMapToBubdle(Bundle bundle, Map<String, String> map) {
        for (Map.Entry<String, String> entry : map.entrySet()) {
            bundle.putString(entry.getKey(), entry.getValue());
        }
    }

    /*
    public static Observable<GraphResponse> get(String path, Bundle queries) {
        GraphRequest request = GraphRequest.newGraphPathRequest(
                AccessToken.getCurrentAccessToken(), path, null);
        if (queries != null) request.setParameters(queries);
        return Observable.create(new OnSubscribeGraphResponse(request));
    }

    public static Observable<GraphResponse> post(String path, JSONObject json, Bundle queries) {
        GraphRequest request = GraphRequest.newPostRequest(
                            AccessToken.getCurrentAccessToken(), ${p.path},
                            json,
        if (queries != null) request.setParameters(queries);
        return Observable.create(new OnSubscribeGraphResponse(request));
    }
    */
}
