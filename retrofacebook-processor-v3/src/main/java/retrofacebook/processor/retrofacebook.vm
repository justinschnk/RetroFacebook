## Template for each generated RetroFacebook_Foo class.
## This template uses the Apache Velocity Template Language (VTL).
## The variables ($pkg, $props, and so on) are defined by the fields of MutableRetroFacebookTemplateVars.
##
## Comments, like this one, begin with ##. The comment text extends up to and including the newline
## character at the end of the line. So comments also serve to join a line to the next one.
## Velocity deletes a newline after a directive (#if, #foreach, #end etc) so ## is not needed there.
## That does mean that we sometimes need an extra blank line after such a directive.
##
## A post-processing step will remove unwanted spaces and blank lines, but will not join two lines.

#if (!$pkg.empty)
package $pkg;
#end

#foreach ($i in $imports)
import $i;
#end

import org.json.JSONObject;
import com.facebook.*;
import rx.Observable;
import rx.Subscriber;
import rx.functions.*;

import com.bluelinelabs.logansquare.LoganSquare;

import android.os.Bundle;
import android.util.Log;

import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Set;
import java.util.HashSet;
import android.app.Activity;

${gwtCompatibleAnnotation}
public final class $subclass$formalTypes extends $origClass$actualTypes {

## Constructor

  public $subclass() {
    super();
  }

  public $subclass(Activity activity) {
    this();
    this.activity = activity;
  }

  Activity activity;

## Property getters

#foreach ($p in $props)

    @Override
    ${p.access}${p.type} ${p.getter}(${p.args}) {

#if ($p.permissions.isEmpty())

        List<String> permissions = Collections.emptyList();

#else

        List<String> permissions = Arrays.asList(
#foreach ($permission in $p.permissions)

            "$permission" #if ($foreach.hasNext) , #end
#end      );
#end

#if ($p.callback)

        Observable<$p.callbackType> obs =

#else
        ${p.type} obs =

#end

        requestNewPermissions(permissions).map(new Func1<Session, Bundle>() {
            @Override public Bundle call(Session s) {
#set ($map = ${p.queries})
#set ($maps = ${p.queryMaps})
#set ($bundles = ${p.queryBundles})
#if (!$map.isEmpty() || !$maps.isEmpty() || !$bundles.isEmpty())

                Bundle bundle = new Bundle();

#foreach ($query in $map.entrySet())

                bundle.putString($query.key, $query.value);

#end
#foreach ($queryMap in $maps)

                addMapToBundle(bundle, ${queryMap});

#end
#foreach ($queryBundle in $bundles)

                bundle.putAll(${queryBundle});

#end

                return bundle;

#elseif ($p.post)

                return ${p.body}.toBundle();

#else

                return null;
#end
            }
        }).flatMap(new Func1<Bundle, Observable<Response>>() {
            @Override public Observable<Response> call(Bundle queries) {

#if ($p.get)

                Request request = new Request(
                        Session.getActiveSession(),
                        ${p.path},
                        queries,
                        HttpMethod.GET);
                return Observable.create(new OnSubscribeResponse(request));

#elseif ($p.post)

                Request request = new Request(
                        Session.getActiveSession(),
                        ${p.path},
                        queries,
                        HttpMethod.POST);
                return Observable.create(new OnSubscribeResponse(request));

#elseif ($p.delete)

                Request request = new Request(
                        Session.getActiveSession(),
                        ${p.path},
                        queries,
                        HttpMethod.DELETE);
                return Observable.create(new OnSubscribeResponse(request));

#end

            }
        }).flatMap(new Func1<Response, Observable<$p.typeArgs>>() {
            @Override public Observable<${p.typeArgs}> call(Response response) {
                // TODO check "data" field to determine parse group or item.
                ${p.typeArgs}s group = null;
                try {
                    Log.d("RetroFacebook", "${p.typeArgs}s: " + response.getGraphObject().getInnerJSONObject().toString());
                    group = LoganSquare.parse(response.getGraphObject().getInnerJSONObject().toString(), AutoJson_${p.typeArgs}s.class);
                } catch (java.io.IOException e) {
                    e.printStackTrace();
                    return Observable.empty();
                }

                if (group != null && group.data() != null) return Observable.from(group.data());

                try {
                return Observable.<${p.typeArgs}>just(LoganSquare.parse(response.getGraphObject().getInnerJSONObject().toString(), AutoJson_${p.typeArgs}.class));
                } catch (java.io.IOException e) {
                    return Observable.empty();
                }
            }
        }).filter(new Func1<${p.typeArgs}, Boolean>() {
            @Override public Boolean call(${p.typeArgs} item) {
                return item != null;
            }
        });

#if ($p.callback)

        obs.toList().subscribe(new Action1<List<$p.callbackType>>() {
                @Override public void call(List<$p.callbackType> list) {
                    ${p.callbackArg}.onCompleted(list);
                }
            }, new Action1<Throwable>() {
                @Override public void call(Throwable e) {
                    ${p.callbackArg}.onError(e);
                }
            });
#else

        return obs;

#end
    }

#end

    public static <T> T cast(Object o) {
        return (T) o;
    }

    public class OnSubscribeResponse implements Observable.OnSubscribe<Response> {
        public Request request;

        public OnSubscribeResponse(Request request) {
            this.request = request;
        }

        @Override
        public void call(final Subscriber<? super Response> sub) {
            Log.d("RetroFacebook", "onSubscribe");
            if (request != null) {
                request.setCallback(new Request.Callback() {
                    @Override
                    public void onCompleted(Response response) {
                        try {
                            FacebookRequestError error = response.getError();
                            if (error != null) {
                                sub.onError(error.getException());
                            } else {
                                sub.onNext(response);
                                request = response.getRequestForPagedResults(Response.PagingDirection.NEXT);

                                if (request != null) {
                                    Log.d("RetroFacebook", "hasNext");
                                    call(sub);
                                } else {
                                    Log.d("RetroFacebook", "end");
                                    sub.onCompleted();
                                }
                            }
                        } catch (Throwable e) {
                            sub.onError(e);
                        }
                    }
                });

                RequestAsyncTask task = new RequestAsyncTask(request);
                task.execute();
            } else {
                sub.onCompleted();
            }
        }
    }

    private static void addMapToBundle(Bundle bundle, Map<String, String> map) {
        for (Map.Entry<String, String> entry : map.entrySet()) {
            bundle.putString(entry.getKey(), entry.getValue());
        }
    }

    public static final String PUBLISH_PERMISSION_PREFIX = "publish";
    public static final String MANAGE_PERMISSION_PREFIX = "manage";

    @SuppressWarnings("serial")
    private static final Set<String> OTHER_PUBLISH_PERMISSIONS = new HashSet<String>() {{
        add("ads_management");
        add("create_event");
        add("rsvp_event");
    }};

    public static boolean hasPublishPermission() {
        return hasPublishPermission(Session.getActiveSession() != null ? Session.getActiveSession().getPermissions() : Collections.<String>emptyList());
    }

    public static boolean hasPublishPermission(Collection<String> permissions) {
        for (String permission : permissions) {
            if (isPublishPermission(permission)) return true;
        }

        return false;
    }

    public static boolean isPublishPermission(String permission) {
        return (permission.startsWith(PUBLISH_PERMISSION_PREFIX) ||
             permission.startsWith(MANAGE_PERMISSION_PREFIX) ||
             OTHER_PUBLISH_PERMISSIONS.contains(permission));
    }

    public static boolean hasReadPermission() {
        if (Session.getActiveSession() == null) return false;
        if (Session.getActiveSession().getPermissions() == null) return false;
        if (Session.getActiveSession().getPermissions().isEmpty()) return false;

        return !hasPublishPermission();
    }

    public static boolean hasReadPermission(Collection<String> permissions) {
        if (Session.getActiveSession() == null) return false;
        if (Session.getActiveSession().getPermissions() == null) return false;
        if (Session.getActiveSession().getPermissions().isEmpty()) return false;

        return !hasPublishPermission(permissions);
    }

    public static boolean isReadPermission(String permission) {
        return !isPublishPermission(permission);
    }

    public static List<String> filter(Collection<String> permissions) {
        List<String> newPermissions = new ArrayList<String>(permissions);
        if (newPermissions == null) return newPermissions;
        if (newPermissions.isEmpty()) return newPermissions;

        List<String> activePermissions = Session.getActiveSession().getPermissions();
        newPermissions.removeAll(activePermissions);
        return newPermissions;
    }

    public Observable<Session> requestNewPermissions(final Collection<String> permissions) {
        return Observable.create(new Observable.OnSubscribe<Session>() {
            @Override
            public void call(final Subscriber<? super Session> sub) {
                if (permissions == null || permissions.isEmpty()) {
                    sub.onNext(null);
                    sub.onCompleted();
                    return;
                }
                List<String> newPermissions = filter(permissions);
                if (newPermissions == null || newPermissions.isEmpty()) {
                    sub.onNext(null);
                    sub.onCompleted();
                    return;
                }
                Session activeSession = Session.getActiveSession();
                activeSession.addCallback(new Session.StatusCallback() {
                    @Override
                    public void call(Session session, SessionState state, Exception exception) {
                        if (exception != null) {
                            sub.onError(exception);
                        } else {
                            if (SessionState.OPENED_TOKEN_UPDATED.equals(session.getState())) {
                                sub.onNext(session);
                            }
                            sub.onCompleted();
                        }
                    }
                });
                activeSession.requestNewPublishPermissions(new Session.NewPermissionsRequest(activity, newPermissions));
            }
        });
    }
}
